from typing import Iterator
import numpy as np
import torch
import torchvision
from torch.utils.data import DataLoader

import zarrdataset as zds


if __name__ == "__main__":
    print("Demo using batched Zarr-based datasets")
    # These are images from the Image Data Resource (IDR) 
    # https://idr.openmicroscopy.org/ that are publicly available and were 
    # converted to the OME-NGFF (Zarr) format by the OME group. More examples
    # can be found at Public OME-Zarr data (Nov. 2020)
    # https://www.openmicroscopy.org/2020/11/04/zarr-data.html
    filenames = ["https://uk1s3.embassy.ebi.ac.uk/idr/zarr/v0.1/9836839.zarr",
                 "https://uk1s3.embassy.ebi.ac.uk/idr/zarr/v0.1/9836840.zarr",
                 "https://uk1s3.embassy.ebi.ac.uk/idr/zarr/v0.1/9836841.zarr",
                 "https://uk1s3.embassy.ebi.ac.uk/idr/zarr/v0.1/9836842.zarr"]
    data_group = "0"
    data_axes = "TCZYX"
    patch_size = 4096
    batch_size = 1
    num_workers = 0

    torch.manual_seed(777)
    patch_sampler = zds.BlueNoisePatchSampler(patch_size, chunk=float('inf'))

    transform_fn = torchvision.transforms.Compose([
        zds.SelectAxes(source_axes=data_axes,
                       axes_selection={"T": 0, "Z": 0},
                       target_axes="YXC"),
        zds.ZarrToArray(np.float64),
        torchvision.transforms.ToTensor(),
    ])

    # This Dataset will retrieve patches and the ROI from where them were taken
    my_dataset = zds.ZarrDataset(filenames, transform=transform_fn,
                                 data_group=data_group,
                                 data_axes=data_axes,
                                 patch_sampler=patch_sampler,
                                 shuffle=True,
                                 progress_bar=True,
                                 batch_per_image=True,
                                 return_positions=True,
                                 batch_size=batch_size)

    # The Dataset was set to generate batches, so here we set `batch_size` to
    # None. However, we still need to use the collate function from zarrdataset
    # to convert any pairs generated by the Dataset to PyTorch tensors.
    my_dataloader = DataLoader(
        my_dataset,
        batch_size=batch_size,
        num_workers=num_workers,
        worker_init_fn=zds.zarrdataset_worker_init,
        collate_fn=zds.collate_zarr_batches_fn,
        persistent_workers=num_workers > 0)

    for i, sample in enumerate(my_dataloader):
        sample_str = "Batched sample %i" % i
        sample_str += "".join(f" {s.shape}, {s.dtype}" for s in sample)
        print(sample_str)
